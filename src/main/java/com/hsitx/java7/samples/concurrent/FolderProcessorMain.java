package com.hsitx.java7.samples.concurrent;

import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.TimeUnit;

public class FolderProcessorMain {
	public static void main(String[] args) {
		long start = System.currentTimeMillis();
		
		// Create ForkJoinPool using the default constructor.
		ForkJoinPool pool = new ForkJoinPool();
		// Create three FolderProcessor tasks. Initialize each one with a different folder path.
		FolderProcessor log = new FolderProcessor("/var/log", "log");
		FolderProcessor download = new FolderProcessor("/home/storage/Downloads", "tmp");
		FolderProcessor workspace = new FolderProcessor("/home/storage/workspace", "java");

		//Execute the three tasks in the pool using the execute() method.
		pool.execute(log);
		pool.execute(download);
		pool.execute(workspace);
		
		do {
			System.out.printf("******************************************\n");
			System.out.printf("Main: Parallelism: %d\n", pool.getParallelism());
			System.out.printf("Main: Active Threads: %d\n", pool.getActiveThreadCount());
			System.out.printf("Main: Task Count: %d\n", pool.getQueuedTaskCount());
			System.out.printf("Main: Steal Count: %d\n", pool.getStealCount());
			System.out.printf("******************************************\n");
			
			try {
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		} while ((!log.isDone()) || (!download.isDone()) || (!workspace.isDone()));
		
		// Shutdown ForkJoinPool using the shutdown() method.
		pool.shutdown();
		//Write the number of results generated by each tasks to the console.
		List<String> results;
		results = log.join();
		System.out.printf("Log: %d files found.\n", results.size());
		results = download.join();
		System.out.printf("Download: %d files found.\n", results.size());
		results = workspace.join();
		System.out.printf("Workspace: %d files found.\n", results.size());
		
		long end = System.currentTimeMillis();
		System.out.println("Duration: " + (end - start));
	}
}
